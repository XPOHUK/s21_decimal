using System;

class FromDecimalToFloat
{
    public static void ShowTestOk(decimal Argument) {
        if (Argument == 0 && getSign(Argument) != 0) {
            Console.WriteLine( "    // -{0}", Argument);
        } else {
            Console.WriteLine( "    // {0}", Argument);
        }
        Console.WriteLine( "    s21_decimal decimal = {0};", getDecimalInit(Argument));

        Console.WriteLine( "    int check = {0};", BitConverter.SingleToInt32Bits(decimal.ToSingle(Argument)));
        Console.WriteLine("");
        Console.WriteLine("    test_from_decimal_to_float(decimal, check);");
    }
    
    public static void ShowTestFail(decimal Argument) {
        if (Argument == 0 && getSign(Argument) != 0) {
            Console.WriteLine( "    // -{0}", Argument);
        } else {
            Console.WriteLine( "    // {0}", Argument);
        }
        Console.WriteLine( "    s21_decimal decimal = {0};", getDecimalInit(Argument));
        Console.WriteLine("");
        Console.WriteLine("    test_from_decimal_to_float_fail(decimal);");
    }
    
    public static string getDecimalInit(decimal value) {
        int[] bits = decimal.GetBits(value);
        string ctor = String.Format(
            "{{{{0x{0:X}", bits[ 0 ] );

        for( int index = 1; index < bits.Length; index++ )
            ctor += String.Format( ", 0x{0:X}", bits[ index ] );
        ctor += "}}";
        return ctor;
    }
    
    public static int getSign(decimal value) {
        int[] bits = decimal.GetBits(value);
        return (bits[3] & (1 << 31));
    }
    
    public static int nextInt32() {
        var rng = new Random();
         int firstBits = rng.Next(0, 1 << 4) << 28;
         int lastBits = rng.Next(0, 1 << 28);
         return firstBits | lastBits;
    }
    
    public static decimal randomDecimal() {
        int b0 = 0;
        int b1 = 0;
        int b2 = 0;
        byte scale = 0;
        bool sign = false;
        
        var rng = new Random();
        b0 = nextInt32();
        sign = rng.Next(2) == 1;
        scale = (byte) rng.Next(29);
        b1 = nextInt32();
        b2 = nextInt32();

        return new decimal(b0, b1, b2, sign, scale);
    }

    public static void Main( )
    {   
        Console.OutputEncoding = System.Text.Encoding.UTF8;
        decimal[] decimal_max = new decimal[29 + 29];
        
        for (int k = 0; k < 29; k++) {
            if (k == 0) {
                decimal_max[k] = Decimal.MaxValue;
            } else {
                decimal_max[k] = decimal_max[k - 1] / 10;
            }
        }

        for (int k = 29; k < 29+29; k++) {
            if (k == 29) {
                decimal_max[k] = Decimal.MaxValue - 1;
            } else {
                decimal_max[k] = decimal_max[k - 1] / 10;
            }
        }

        decimal[] decimal_random = new decimal[100];
        
        for (int k = 0; k < 100; k++) {
            decimal_random[k] = randomDecimal();
        }

        decimal[] numbers = {
            52818775009509558395695966890M, 5281877500950955839569596689.0M, 528187750.09509558395695966890M, 5.2818775009509558395695966890M, // 10101010 10101010 10101010
            52818775009509558392832655360M, 5281877500950955839283265536.0M, 528187750.09509558392832655360M, 5.2818775009509558392832655360M, // 10101010 10101010 00000000
            52818774997211729016086244010M, 5281877499721172901608624401.0M, 528187749.97211729016086244010M, 5.2818774997211729016086244010M, // 10101010 00000000 10101010
            52818774997211729013222932480M, 5281877499721172901322293248.0M, 528187749.97211729013222932480M, 5.2818774997211729013222932480M, // 10101010 00000000 00000000
            12297829382473034410M, 1229782938247303441.0M, 122978293.82473034410M, 1.2297829382473034410M, // 00000000 10101010 10101010
            12297829379609722880M, 1229782937960972288.0M, 122978293.79609722880M, 1.2297829379609722880M, // 00000000 10101010 00000000
            2863311530M, 286331153.0M, 286331.1530M, 2.863311530M, // 00000000 00000000 10101010
            26409387504754779197847983445M, 2640938750475477919784798344.5M, 264093875.04754779197847983445M, 2.6409387504754779197847983445M, // 01010101 01010101 01010101
            26409387504754779196416327680M, 2640938750475477919641632768.0M, 264093875.04754779196416327680M, 2.6409387504754779196416327680M, // 01010101 01010101 00000000
            26409387498605864508043122005M, 2640938749860586450804312200.5M, 264093874.98605864508043122005M, 2.6409387498605864508043122005M, // 01010101 00000000 01010101
            26409387498605864506611466240M, 2640938749860586450661146624.0M, 264093874.98605864506611466240M, 2.6409387498605864506611466240M, // 01010101 00000000 00000000
            6148914691236517205M, 614891469123651720.5M, 6148914.691236517205M, 6.148914691236517205M, // 00000000 01010101 01010101
            6148914689804861440M, 614891468980486144.0M, 6148914.689804861440M, 6.148914689804861440M, // 00000000 01010101 00000000
            1431655765M, 143165576.5M, 143165.5765M, 1.431655765M, // 00000000 00000000 01010101
            18446744078004518913M, 1844674407800451891.3M, 184467440.78004518913M, 1.8446744078004518913M, // 00000001 00000001 00000001
            18446744078004518912M, 1844674407800451891.2M, 18446744.078004518912M, 1.8446744078004518912M, 
            18446744073709551617M, 1844674407370955161.7M, 1844674.4073709551617M, 1.8446744073709551617M, 
            18446744073709551616M, 1844674407370955161.6M, 184467.44073709551616M, 1.8446744073709551616M, 
            4294967297M, 429496729.7M, 42949672.97M, 429496.7297M, 4.294967297M, 42.94967297M, 
            4294967296M, 429496729.6M, 42949672.96M, 4294967.296M, 4.294967296M,  42.94967296M, 
            new decimal (1, 0, 0, false, 1), new decimal (1, 0, 0, false, 13), new decimal (1, 0, 0, false, 14), new decimal (1, 0, 0, false, 27), new decimal (1, 0, 0, false, 28),
            39614081266355540835774234624M, 3961408126635554083577423462.4M, 396140812.66355540835774234624M, 3.9614081266355540835774234624M, // 10000000 00000000 00000000 00000000
            39614081266355540833626750976M, 3961408126635554083362675097.6M, 39614081.266355540833626750976M, 3.9614081266355540833626750976M, 
            39614081257132168798919458816M, 3961408125713216879891945881.6M, 3961408.1257132168798919458816M, 3.9614081257132168798919458816M, 
            39614081257132168796771975168M, 3961408125713216879677197516.8M, 396140.81257132168796771975168M, 3.9614081257132168796771975168M, 
            9223372039002259456M, 922337203900225945.6M, 922337203.9002259456M, 9.223372039002259456M, 
            9223372036854775808M, 922337203685477580.8M, 92233720.36854775808M, 9.223372036854775808M, 
            2147483648M, 214748364.8M, 21474836.48M, 214748.3648M, 21.47483648M, 2.147483648M, 
            156064767562212695305426944M, 15606476756221269530542694.4M, 1560647.67562212695305426944M, 1.56064767562212695305426944M, // 00000000 10000001 00011000 00000000 00000000 10000001 00011000 00000000 00000000 10000001 00011000 00000000
            156064767562212695296966656M, 15606476756221269529696665.6M, 15606476.7562212695296966656M, 1.56064767562212695296966656M, 
            156064767525876035030685696M, 15606476752587603503068569.6M, 156064.767525876035030685696M, 1.56064767525876035030685696M, 
            156064767525876035022225408M, 15606476752587603502222540.8M, 15606.4767525876035022225408M, 1.56064767525876035022225408M, 
            36336660283201536M, 3633666028320153.6M, 363366602.83201536M, 3.6336660283201536M, 
            36336660274741248M, 3633666027474124.8M, 3633666.0274741248M, 363366602.74741248M, 36.336660274741248M, 3.6336660274741248M, 
            8460288M, 846028.8M, 84602.88M, 8460.288M, 84.60288M, 8.460288M, 
            79228162514264337593543950335M, 7922816251426433759354395033.5M, 792281625.14264337593543950335M, 7.9228162514264337593543950335M, // 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
            79228162514264337589248983040M, 7922816251426433758924898304.0M, 79228162.514264337589248983040M, 7.9228162514264337589248983040M, 
            79228162495817593524129366015M, 7922816249581759352412936601.5M, 7922816.2495817593524129366015M, 7.9228162495817593524129366015M, 
            79228162495817593519834398720M, 7922816249581759351983439872.0M, 792281.62495817593519834398720M, 7.9228162495817593519834398720M, 
            18446744073709551615M, 1844674407370955161.5M, 18446744073709551.615M, 184467440.73709551615M, 184.46744073709551615M, 1.8446744073709551615M, 
            18446744069414584320M, 1844674406941458432.0M, 18446744069414584.320M, 18446744.069414584320M, 184.46744069414584320M, 1.8446744069414584320M, 
            4294967295M, 429496729.5M, 42949672.95M, 42949.67295M, 42.94967295M, 4.294967295M, 
            1M, 1.0M, 1.00M, 1.000M, 1.0000000000M, 1.0000000000000000M, 1.00000000000000000000000M, 1.000000000000000000000000000M, 1.0000000000000000000000000000M,
            1.1M, 12.12M, 123.123M, 1234.1234M, 12345.12345M, 123456.123456M, 1234567.1234567M, 1234567890.1234567890M, 12345678901234.12345678901234M,
            99M, 9.9M, 99.99M, 999.999M, 9999.9999M, 99999.99999M, 999999.999999M, 9999999.9999999M, 99999999.99999999M, 999999999.999999999M, 9999999999.9999999999M, 
            9M, 0.9M, 0.99M, 0.999M, 0.9999M, 0.99999M, 0.999999M, 0.9999999M, 0.99999999M, 0.999999999M, 0.9999999999M, 0.99999999999999999999M, 
            new decimal (0, 0, 0, true, 0), new decimal (0, 0, 0, true, 1), new decimal (0, 0, 0, true, 2), new decimal (0, 0, 0, true, 14), new decimal (0, 0, 0, true, 27), new decimal (0, 0, 0, true, 28),
            2147483646M, 2147483646.00M, 2147483646.99M, 2147483646.999999999999999999M, 21474836.46M, 214.7483646M, 2.147483646M, 0.2147483646M, 0.0000000000000000002147483646M, 
            2147483647M, 2147483647.00M, 2147483647.99M, 2147483647.999999999999999999M, 21474836.47M, 214.7483647M, 2.147483647M, 0.2147483647M, 0.0000000000000000002147483647M, 
            2147483648M, 2147483648.00M, 2147483648.99M, 2147483648.999999999999999999M, 21474836.48M, 214.7483648M, 2.147483648M, 0.2147483648M, 0.0000000000000000002147483648M,
            1.0000000596046412226769461995M,
            1.0000001788139307734581961995M,
            1.0000000596046429989337921142M,
            1.0000001788139325497150421142M,
            1.0000000596046429990530014038M,
            1.0000001788139325498342514038M,
            1.000000059604644775390625M,
            1.000000178813934326171875M,
            1.0000000596046483280658721924M,
            1.0000001788139378788471221924M,
            1.000000059604651880817982601M,
            1.000000178813941431599232601M,
            1.0000000596046483281850814820M,
            1.0000001788139378789663314820M,
            1.0000001788139343261718750M,
            27670118309587582976M,
            27670117210075957249M,
            27670117210075957248M,
            27670116110564327424M,
            87381.3359375M,
            87381.33203126M,
            87381.33203125M,
            87381.328125M,
            32.000003814697265625M,
            32.0000019074M,
            32.000001907348636365213678801M,
            32.000001907348636365213678800M,
            32.0000019073M,
            32.0000000000M,
            79228160153081096158721343489M,
            79228160153081096158721343488M,
            79228160153081096158721343487M,
            79228160153081091760674832384M,
            79228160153081091760674832383M,
            79228157791897854723898736699M,
            79228157791897854723898736641M,
            79228157791897854723898736640M,
            79228153069531371854253522944M,
            79228148347164888984608309248M,
            79228143624798406114963095552M,
            79228138902431923245317881856M,
            79228134180065440375672668160M,
            79228129457698957506027454464M,
            79228124735332474636382240768M,
            79228086956400611679220531200M,
            79228011398536885764897112064M,
            79227860282809433936250273792M,
            66023467187764787038071554048M,
            59421121885698253195157962752M,
            52818771861265236482599157760M,
            39614081257132168796771975168M,
            16505866796941196759517888512M,
            13204692965316309120649789440M,
            1031616674808824797469868032.0M,
            1031616674808824797469868032M,
            825293310332269320040611840.0M,
            825293310332269320040611840M,
            4029752635971971865116672.0000M,
            4029752635971971865116672M,
            2417851639229258349412352M,
            2417851495114070273556480.0000M,
            2417851495114070273556480M,
            2417851350998882197700608.0000M,
            2417851350998882197700608M,
            3223801993485427031408640.0000M,
            3223801993485427031408640M,
            2014876317985985932558336.0000M,
            2014876317985985932558336M,
            1611900996742713515704320.0000M,
            1611900996742713515704320M,
            9444732965739290427392M,
            9444732402789337006080.000000M,
            9444732402789337006080M,
            9444731839839383584768.000000M,
            9444731839839383584768M,
            7870610617132757549056.0000000M,
            7870610617132757549056M,
            6296488268526224670720.0000000M,
            6296488268526224670720M,
            590295810358705651712M,
            590295775174333562880.00000000M,
            590295775174333562880M,
            590295739989961474048.00000000M,
            590295739989961474048M,
            491913163570797346816.00000000M,
            491913163570797346816M,
            393530516782889041920.00000000M,
            393530516782889041920M,
            147573952589676412928M,
            147573943793583390720.00000000M,
            147573943793583390720M,
            147573934997490368512.00000000M,
            147573934997490368512M,
            122978290892699336704.00000000M,
            122978290892699336704M,
            98382629195722260480.00000000M,
            98382629195722260480M,
            61489145446349668352.000000000M,
            61489145446349668352M,
            36893488147419103232M,
            36893485948395847680.000000000M,
            36893485948395847680M,
            36893483749372592128.000000000M,
            36893483749372592128M,
            30744572723174834176.000000000M,
            30744572723174834176M,
            27670116110564327424.0M,
            27670116110564327424M,
            24595657298930565120.000000000M,
            24595657298930565120M,
            8589934592M,
            8589934080.000000000000000000M,
            8589934080M,
            8589933568.000000000000000000M,
            8589933568M,
            7158278656.0000000000000000000M,
            7158278656M,
            6442450944.0M,
            6442450944M,
            5726622720.0000000000000000000M,
            5726622720M,
            5131067.5000000000000000000000M,
            5131067.5M,
            5131067.0000000000000000000000M,
            5131067M,
            5131066.5000000000000000000000M,
            5131066.5M,
            1131071.1250000000000000000000M,
            1131071.125M,
            1131071.00000000000000000000M,
            1131071M,
            1131070.8750000000000000000000M,
            1131070.875M,
            131071.99218750000000000000000M,
            131071.9921875M,
            131071.00781250000000000000000M,
            131071.0078125M,
            131071.0000000000000000M,
            131071M,
            131070.99218750000000000000000M,
            131070.9921875M,
            109226.66406250000000000000000M,
            109226.6640625M,
            98304.00781250000000000000000M,
            98304.0078125M,
            98304.0M,
            98304M,
            98303.99218750000000000000000M,
            98303.9921875M,
            87381.3281250000000000000000M,
            87381.00781250000000000000000M,
            87381.0078125M,
            87381.0000000000000000M,
            87381M,
            87380.99218750000000000000000M,
            87380.9921875M,
            50000.00390625000000000000000M,
            50000.00390625M,
            50000.00000000000M,
            50000M,
            49999.99609375000000000000000M,
            49999.99609375M,
            32000.00195312500000000000000M,
            32000.001953125M,
            32000.000000M,
            32000M,
            31999.99804687500000000000000M,
            31999.998046875M,
            1024.00012207031250000000000M,
            1024.0001220703125M,
            1024M,
            1023.99993896484375000000000M,
            1023.99993896484375M,
            512.00006103515625000000000M,
            512.00006103515625M,
            512M,
            511.99996948242187500000000M,
            511.999969482421875M,
            511.9999389648437500000000M,
            511.99993896484375M,
            426.66665649414062500000000M,
            426.666656494140625M,
            384.0M,
            384M,
            341.3333129882812500000000M,
            341.33331298828125M,
            64.00000762939453125000000M,
            64.00000762939453125M,
            64M,
            63.99999618530273437500000M,
            63.999996185302734375M,
            32M,
            31.99999809265136718750000M,
            31.9999980926513671875M,
            31.9999961853027343750000M,
            31.999996185302734375M,
            26.66666603088378906250000M,
            26.6666660308837890625M,
            24.0M,
            24M,
            21.3333320617675781250000M,
            21.333332061767578125M,
            16.00000190734863281250000M,
            16.0000019073486328125M,
            16M,
            15.99999904632568359375000M,
            15.99999904632568359375M,
            10.98035526275634765625000M,
            10.98035526275634765625M,
            9.00000095367431640625000M,
            9.00000095367431640625M,
            9.000M,
            9M,
            8.99999904632568359375000M,
            8.99999904632568359375M,
            8M,
            7.99999952316284179687500M,
            7.999999523162841796875M,
            6.66666650772094726562500M,
            6.666666507720947265625M,
            6.0M,
            6M,
            5.3333330154418945312500M,
            5.33333301544189453125M,
            4M,
            3.99999976158142089843750M,
            3.9999997615814208984375M,
            3.9999995231628417968750M,
            3.999999523162841796875M,
            3.33333325386047363281250M,
            3.3333332538604736328125M,
            3.0M,
            3M,
            2.6666665077209472656250M,
            2.666666507720947265625M,
            2.00000023841857910156250M,
            2.0000002384185791015625M,
            2M,
            1.99999988079071044921875M,
            1.50000011920928955078125M,
            1.5M,
            1.49999988079071044921875M,
            1M,
            0.15625M,
            0.999999940395355224609375M,
            0.24999998509883880615234375M,
            0.0156249990686774253845214844M,
            0.0000610351526120211929082870M,
            0.000061035152612021192908287M,
            0.0000000009313225191043272844M,
            0.0000000000000000002168404216M,
            0.0000000000000000001084202108M,
            0.0000000000000000000542101054M,
            0.0000000000000000000135525263M,
            0.0000000000000000000008470329M,
            0.0000000000000000000000033087M,
            0.0000000000000000000000000001M,
            0.0000000000000000000000000004M,
            0.0000000000000000000000000065M,
            0.0000000000000000000000016544M,
            1.3333332538604736328125M,
            0.66666662693023681640625M,
            0.1666666567325592041015625M,
            0.0104166660457849502563476562M,
            0.0000406901017413474619388580M,
            0.000040690101741347461938858M,
            0.0000000006208816794028848562M,
            0.0000000001552204198507212141M,
            0.0000000000388051049626803035M,
            0.0000000000024253190601675190M,
            0.000000000002425319060167519M,
            0.0000000000000094739025787794M,
            0.0000000000000047369512893897M,
            0.0000000000000000185037159742M,
            0.0000000000000000011564822484M,
            0.0000000000000000001445602810M,
            0.000000000000000000144560281M,
            0.0000000000000000000722801405M,
            0.0000000000000000000361400703M,
            0.0000000000000000000090350176M,
            0.0000000000000000000005646886M,
            0.0000000000000000000000022058M,
            0.0000000000000000000000005515M,
            0.0000000000000000000000000172M,
            0.0000000000000000000000000043M,
            0.0000000000000000000000000003M,
            1.66666662693023681640625M,
            0.833333313465118408203125M,
            0.20833332836627960205078125M,
            0.0130208330228924751281738281M,
            0.0000508626289956737309694290M,
            0.000050862628995673730969429M,
            0.0000000007761021270091816859M,
            0.0000000001940255317522954215M,
            0.0000000000485063829380738554M,
            0.0000000000030316489336296160M,
            0.000000000003031648933629616M,
            0.0000000000000118423786469907M,
            0.0000000000000059211893234953M,
            0.0000000000000007401486654369M,
            0.0000000000000000231296457949M,
            0.0000000000000000014456028622M,
            0.0000000000000000003614007155M,
            0.0000000000000000001807003578M,
            0.0000000000000000000903501789M,
            0.0000000000000000000451750894M,
            0.0000000000000000000112937724M,
            0.0000000000000000000007058608M,
            0.0000000000000000000000027573M,
            0.0000000000000000000000013786M,
            0.0000000000000000000000006893M,
            0.0000000000000000000000001723M,
            0.0000000000000000000000000054M,
            0.75M,
            0.5M,
            0.1875M,
            0.125M,
            0.0625M,
            0.015625M,
            0.01171875M,
            0.0078125M,
            0.00390625M,
            0.000244140625M,
            0.0000457763671875M,
            0.000030517578125M,
            0.0000152587890625M,
            0.0000000004656612873077392578M,
            0.0000000006984919309616088867M,
            0.0000000000000000001084202172M,
            0.100000001490116119384765625M,
            0.999000012874603271484375M,
            0.89999997615814208984375M,
            0.099899999797344207763671875M,
            0.0099900001659989356994628906M,
            0.0009990000398829579353332520M,
            0.000999000039882957935333252M,
            0.0000998999967123381793498993M,
            0.0000099899998531327582895756M,
            0.0000009990000080506433732808M,
            0.0000000998999993839788658079M,
            0.0000000099899999383978865808M,
            0.0000000009989999938397886581M,
            0.0000000000998999979962000850M,
            0.000000000099899997996200085M,
            0.0000000000099900001465647037M,
            0.0000000000009990000363405138M,
            0.0000000000000999000009235460M,
            0.000000000000099900000923546M,
            0.0000000000000091534479919764M,
            0.0000000000000001153448307064M,
            0.0000000000000000115344827398M,
            0.0000000000000000011534482533M,
            0.0000000000000000001626303259M,
            0.0000000000000000001153448305M,
            0.0000000000000000000115344827M,
            0.0000000000000000000071534482M,
            0.0000000000000000000071534474M,
            0.0000000000000000000007534475M,
            0.0000000000000000000007534474M,
            0.0000000000000000000000754475M,
            0.0000000000000000000000754474M,
            0.0000000000000000000000095448M,
            0.0000000000000000000000095447M,
            0.0000000000000000000000000545M,
            0.0000000000000000000000000544M,
            0.0000000000000000000000000145M,
            0.0000000000000000000000000144M,
            0.0000000000000000000000000015M,
            0.0000000000000000000000000014M,
            0.0000000000000000000000000012M,
            0.0000000000000000000000000011M,
            0.0000000000000000000000000010M,
            0.000000000000000000000000001M,
            0.0000000000000000000000000009M,
            0.0000000000000000000000000008M,
            0.0000000000000000000000000007M,
            0.0000000000000000000000000006M,
            0.0000000000000000000000000005M,
            0.0000000000000000000000000002M,
        };
        
        decimal[] result = new decimal[decimal_max.Length + numbers.Length + decimal_random.Length];
        
        decimal_max.CopyTo(result, 0);
        numbers.CopyTo(result, decimal_max.Length);
        decimal_random.CopyTo(result, decimal_max.Length + numbers.Length);

        /*var str = string.Join("\n", decimal_random);
        Console.WriteLine(str);*/
        
        decimal[] tests_ok = new decimal[0];
        decimal[] tests_fail = new decimal[0];;
        
        
        foreach (decimal number in result) {
            Array.Resize(ref tests_ok, tests_ok.Length + 1);
            tests_ok[tests_ok.Length - 1] = number;
            decimal tmp = decimal.Negate(number);
            Array.Resize(ref tests_ok, tests_ok.Length + 1);
            tests_ok[tests_ok.Length - 1] = tmp;

            if (number != 0 && (number < 1M && number > -1M || Decimal.MaxValue / number > 3)) {
                decimal tmp1 = number * 2.65M;
                Array.Resize(ref tests_ok, tests_ok.Length + 1);
                tests_ok[tests_ok.Length - 1] = tmp1;
                decimal tmp2 = decimal.Negate(tmp1);
                Array.Resize(ref tests_ok, tests_ok.Length + 1);
                tests_ok[tests_ok.Length - 1] = tmp2;
            }
        }

        Console.WriteLine("");
        Console.WriteLine("/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
        Console.WriteLine("Tests for correct data (automatic)");
        Console.WriteLine("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */");
        Console.WriteLine("");
        int i = 0;
        foreach (decimal number in tests_ok) {
            i++;
            Console.WriteLine("START_TEST(test_from_decimal_to_float_ok{0}) {{", i);
            ShowTestOk(number);
            Console.WriteLine("}");
            Console.WriteLine("");
        }

        //Console.WriteLine("");
        //Console.WriteLine("/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
        //Console.WriteLine("Tests for incorrect data (auto)");
        //Console.WriteLine("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */");
        //Console.WriteLine("");
        i = 0;
        foreach (decimal number in tests_fail) {
            i++;
            Console.WriteLine("START_TEST(test_from_decimal_to_float_fail{0}) {{", i);
            ShowTestFail(number);
            Console.WriteLine("}");
            Console.WriteLine("");
        }

        Console.WriteLine("");
        i = 0;
        int suit_num = 1;
        foreach (decimal number in tests_ok) {
            if (i % 400 == 0) {
                Console.WriteLine("Suite *from_decimal_to_float_suite{0}(void) {{", suit_num);
                Console.WriteLine("    Suite *s;");
                Console.WriteLine("    TCase *tc_core;");
                Console.WriteLine("");
                Console.WriteLine("    s = suite_create(\"from_decimal_to_float{0}\");", suit_num);
                Console.WriteLine("    tc_core = tcase_create(\"Core\");");
                suit_num++;
            }
            i++;
            Console.WriteLine("    tcase_add_test(tc_core, test_from_decimal_to_float_ok{0});", i);
            if (i % 400 == 0) {
                Console.WriteLine("");
                Console.WriteLine("    suite_add_tcase(s, tc_core);");
                Console.WriteLine("    return s;");
                Console.WriteLine("}");
                Console.WriteLine("");
            }
        }
        
        if (i % 400 != 0) {
            Console.WriteLine("");
            Console.WriteLine("    suite_add_tcase(s, tc_core);");
            Console.WriteLine("    return s;");
            Console.WriteLine("}");
            Console.WriteLine("");
        }
        
        Console.WriteLine("");
        i = 0;
        foreach (decimal number in tests_fail) {
            if (i % 400 == 0) {
                Console.WriteLine("Suite *from_decimal_to_float_suite{0}(void) {{", suit_num);
                Console.WriteLine("    Suite *s;");
                Console.WriteLine("    TCase *tc_core;");
                Console.WriteLine("");
                Console.WriteLine("    s = suite_create(\"from_decimal_to_int{0}\");", suit_num);
                Console.WriteLine("    tc_core = tcase_create(\"Core\");");
                suit_num++;
            }
            i++;
            Console.WriteLine("    tcase_add_test(tc_core, test_from_decimal_to_float_fail{0});", i);
            if (i % 400 == 0) {
                Console.WriteLine("");
                Console.WriteLine("    suite_add_tcase(s, tc_core);");
                Console.WriteLine("    return s;");
                Console.WriteLine("}");
                Console.WriteLine("");
            }
        }
        if (i % 400 != 0) {
            Console.WriteLine("");
            Console.WriteLine("    suite_add_tcase(s, tc_core);");
            Console.WriteLine("    return s;");
            Console.WriteLine("}");
            Console.WriteLine("");
        }
    }
}
